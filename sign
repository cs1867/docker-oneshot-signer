#!/bin/sh -e
#
# Do a DOSS signing with a container from GHCR.
#
#BEGIN-HELP
# Usage:  sign [ OPTIONS ] REPO-PATH KEY
#
# Arguments (see README.md for more information):
#     REPO-PATH is the path to a built repository
#     KEY is the key name or a path to an exported key
#
# Options:
#     --passphrase P    Use passphrase P for the KEY; prefix with
#                       '@' to read from a file (e.g., '@/foo/bar')
#END-HELP
#

set -e


WHOAMI=$(basename "$0")


die()
{
    echo "$@" 1>&2
    exit 1
}


self_help()
{
    sed -e '1,/^#BEGIN-HELP/d ; /^#END-HELP/,$d ; s/^#\s\{0,1\}//' "$0"
    exit ${1:-0}
}


at_arg()
{
    if echo "$1" | egrep -q -e '^@'
    then
	FILE=$(echo "$1" | sed -e 's/^@//')
	[ -r "${FILE}" ] || die "${FILE}: not found or not readable"
	cat "${FILE}"
    else
	echo "$1"
    fi
}


# Gargle the arguments

PASSPHRASE=
while echo "$1" | egrep -q -e '^--'
do
    OPTION=$1
    shift

    case "${OPTION}" in

	--help)
	    self_help
	    ;;

	--passphrase)
	    PASSPHRASE=$(at_arg "$1")
	    shift
	    ;;

	# These are for debug.

	--command)
	    ECHO=echo
	    ;;

	--container)
	    CONTAINER=$1
	    shift
	    ;;

	--name)
	    NAME_ARG="--name $1"
	    shift
	    ;;

	--no-halt)
	    NO_HALT="--env BUILD_NO_HALT=1"
	    ;;

	--*)
	    die "Unknown option ${OPTION}."
	    ;;
    esac
done

[ "$#" -eq 2 ] \
    || self_help 1


# Repository directory

REPO_DIR_ARG="$1"
REPO_DIR="$1"
[ -d "$1" -a -w "$1" ] \
    || die "${REPO_DIR} is not a writable directory."
echo "${REPO_DIR}" | fgrep -q ':' \
    && die "Build directory cannot contain colons."
REPO_DIR=$(cd "${REPO_DIR}" && pwd)


# Work directory (created within the repository directory)

WORK="${REPO_DIR}/DOSS"
mkdir -p "${WORK}"
chmod 700 "${WORK}"

cleanup()
{
    # TODO: Enable this
    echo DISABLED rm -rf "${WORK}"
}
trap cleanup EXIT



# GPG Key and Passphrase

if echo "$2" | egrep -q -e '^@'
then
    FILE=$(echo "$2" | sed -e 's/^@//')
    [ -r "${FILE}" ] || die "${FILE}: not found or not readable"
    cp "${FILE}" "${WORK}/gpg-signing-key"
else
    gpg --export -a "$2" > "${WORK}/gpg-signing-key"
fi

echo "${PASSPHRASE}" > "${WORK}/gpg-signing-key-passphrase"


# Figure out what kind of packages we're signing and which container
# to use.

if [ -d "${REPO_DIR}/repodata" ]
then
    REPO_TYPE=rpm
# TODO: Identify Debian repositories
elif false
then
    REPO_TYPE=deb
else
    die "${REPO_DIR_ARG}: Unable to identify repository type."
fi


if [ -z "${CONTAINER}" ]
then
    CONTAINER="ghcr.io/perfsonar/docker-oneshot-signer/${REPO_TYPE}:latest"
    PULL_ARG="--pull always"
else
    PULL_ARG="--pull never"
fi


# Make it happen

if [ "$(id -u)" -ne 0 ]
then
    SUDO=sudo
fi

STATUS=0
${ECHO} ${SUDO} docker run \
	${NAME_ARG} \
	${PULL_ARG} \
	${NO_HALT} \
	--tty \
	--tmpfs /tmp \
	--tmpfs /run \
	--volume "${REPO_DIR}:/sign:rw" \
	--rm \
	"${CONTAINER}" \
    || STATUS=$?

# Docker exits with a 130 when systemd is stopped with SIGINT (halt).
# Anything else was a container problem, not a result of the build.
[ $STATUS -eq 0 -o $STATUS -eq 130 ] || false

# Check on the status of the signing
STATUS_FILE="${WORK}/status"

[ -e "${STATUS_FILE}" ] || die "Build produced no status."

BUILD_STATUS=$(cat "${STATUS_FILE}")
if [ "${BUILD_STATUS}" -ne 0 ]
then
    echo "Build failed" 1>&2
    exit "${BUILD_STATUS}"
fi
